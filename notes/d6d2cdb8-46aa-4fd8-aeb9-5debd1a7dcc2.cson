createdAt: "2019-01-26T03:43:04.165Z"
updatedAt: "2019-01-26T03:58:21.100Z"
type: "MARKDOWN_NOTE"
folder: "7fa5be337c9127eb71b8"
title: "Installing Nagios Core on Ubuntu 18.04 LTS or 16.04 LTS"
tags: [
  "linux"
  "nagios"
  "monitoring"
  "sysadmin"
]
content: '''
  # Installing Nagios Core on Ubuntu 18.04 LTS or 16.04 LTS
  ## Pre Requisites
  Install Apache and PHP as required for Nagios
  ```Bash
  sudo apt-get update
  sudo apt-get install wget build-essential unzip openssl libssl-dev
  sudo apt-get install apache2 php libapache2-mod-php php-gd libgd-dev 
  ```
  ## Create Nagios User
  Create a new user account for Nagios and set a password.
  ```Bash
  sudo adduser nagios
  ```
  Now create a group for Nagios setup “nagcmd” and add nagios user to this group. Also, add nagios user in the Apache group.
  ```Bash
  sudo groupadd nagcmd
  sudo usermod -a -G nagcmd nagios
  sudo usermod -a -G nagcmd www-data
  ```
  ## Install Nagios Core Service
  After pre requisites are installed and a user configured for Nagios, we can now install Nagios Core.
  ```Bash
  cd /opt/
  wget https://assets.nagios.com/downloads/nagioscore/releases/nagios-4.4.3.tar.gz
  tar xzf nagios-4.4.3.tar.gz
  ```
  After the source files are extracted, navigate to the directory they are in and install using make.
  ```Bash
  cd nagios-4.4.3
  sudo ./configure --with-command-group=nagcmd
  sudo make all
  sudo make install
  sudo make install-init
  sudo make install-daemoninit
  sudo make install-config
  sudo make install-commandmode
  sudo make install-exfoliation
  ```
  Now copy event handlers scripts under libexec directory. These binaries provides multiple events triggers for your Nagios web interface.
  ```Bash
  cp -R contrib/eventhandlers/ /usr/local/nagios/libexec/
  chown -R nagios:nagios /usr/local/nagios/libexec/eventhandlers
  ```
  ## Setup Apache with Authentication
  Create an Apache configuration file for Nagios
  ```Bash
  sudo vi /etc/apache2/conf-available/nagios.conf
  ```
  ```xml
  ScriptAlias /nagios/cgi-bin "/usr/local/nagios/sbin"
  
  <Directory "/usr/local/nagios/sbin">
     Options ExecCGI
     AllowOverride None
     Order allow,deny
     Allow from all
     AuthName "Restricted Area"
     AuthType Basic
     AuthUserFile /usr/local/nagios/etc/htpasswd.users
     Require valid-user
  </Directory>
  
  Alias /nagios "/usr/local/nagios/share"
  
  <Directory "/usr/local/nagios/share">
     Options None
     AllowOverride None
     Order allow,deny
     Allow from all
     AuthName "Restricted Area"
     AuthType Basic
     AuthUserFile /usr/local/nagios/etc/htpasswd.users
     Require valid-user
  </Directory>
  ```
  We need to setup apache authentication for user nagiosadmin. Until more specific reason use this username as “nagiosadmin” else you would require more changes in configuration.
  ```Bash
  htpasswd -c /usr/local/nagios/etc/htpasswd.users nagiosadmin
  ```
  Now enable Apache configuration and restart Apache service to make the new settings take effect.
  ```Bash
  sudo a2enconf nagios
  sudo a2enmod cgi rewrite
  sudo service apache2 restart
  ```
  ## Installing Nagios Plugins
  After installing and configuring Nagios core service, Download latest nagios-plugins source and install using following commands.
  ```Bash
  cd /opt
  wget http://www.nagios-plugins.org/download/nagios-plugins-2.2.1.tar.gz
  tar xzf nagios-plugins-2.2.1.tar.gz
  cd nagios-plugins-2.2.1
  ```
  Now compile and install Nagios plugins
  ```Bash
  sudo ./configure --with-nagios-user=nagios --with-nagios-group=nagios --with-openssl
  sudo make
  sudo make install
  ```
  ## Verify Settings
  Use the Nagios commands to verify the Nagios installation and configuration file. After successfully verify start the Nagios core service.
  ```Bash
  /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg
  service nagios start
  ```
  Also configure Nagios to auto start on system boot.
  ```Bash
  sudo systemctl enable nagios
  ```
  ## Access Web Interface
  The web interface can be accessed at <hostname or IP>/nagios. You will need to login with the Apache authentication details we set up earlier.
  
  
  
  
  
  
  
  
  
'''
isStarred: false
isTrashed: false
